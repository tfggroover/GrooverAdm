/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client extends BaseService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * Autenticación para el móvil y la App
     * @param refresh_token (optional) 
     * @return Success
     */
    auth(refresh_token: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/home/auth?";
        if (refresh_token !== undefined && refresh_token !== null)
            url_ += "refresh_token=" + encodeURIComponent("" + refresh_token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.transformResult(url_, response_, (r) => this.processAuth(<any>r));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAuth(<any>r));
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAuth(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Callback de spotify con un token fresco
     * @param code (optional) Token
     * @param state (optional) Cookie de estado
     * @return Success
     */
    callback(code: string | null | undefined, state: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/home/callback?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (state !== undefined && state !== null)
            url_ += "State=" + encodeURIComponent("" + state) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.transformResult(url_, response_, (r) => this.processCallback(<any>r));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processCallback(<any>r));
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCallback(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Callback de spotify con un token fresco
     * @param code (optional) Token
     * @param state (optional) Cookie de estado
     * @return Success
     */
    webCallback(code: string | null | undefined, state: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/home/web-callback?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (state !== undefined && state !== null)
            url_ += "State=" + encodeURIComponent("" + state) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.transformResult(url_, response_, (r) => this.processWebCallback(<any>r));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processWebCallback(<any>r));
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processWebCallback(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * IGNORA ESTO
     * @return Success
     */
    configuration(clientId: string | null): Observable<void> {
        let url_ = this.baseUrl + "/_configuration/{clientId}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.transformResult(url_, response_, (r) => this.processConfiguration(<any>r));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processConfiguration(<any>r));
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processConfiguration(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Retrieves the establishments surrounding [lat, lon] in 
    the distance provided
     * @param lat (optional) Latitude
     * @param lon (optional) Longitude
     * @param distance (optional) Distance in METERS
     * @param page (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    placeAll(lat: number | undefined, lon: number | undefined, distance: number | undefined, page: number | undefined, pageSize: number | undefined): Observable<Place[]> {
        let url_ = this.baseUrl + "/api/place?";
        if (lat === null)
            throw new Error("The parameter 'lat' cannot be null.");
        else if (lat !== undefined)
            url_ += "lat=" + encodeURIComponent("" + lat) + "&";
        if (lon === null)
            throw new Error("The parameter 'lon' cannot be null.");
        else if (lon !== undefined)
            url_ += "lon=" + encodeURIComponent("" + lon) + "&";
        if (distance === null)
            throw new Error("The parameter 'distance' cannot be null.");
        else if (distance !== undefined)
            url_ += "distance=" + encodeURIComponent("" + distance) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.transformResult(url_, response_, (r) => this.processPlaceAll(<any>r));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPlaceAll(<any>r));
                } catch (e) {
                    return <Observable<Place[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Place[]>><any>_observableThrow(response_);
        }));
    }

    protected processPlaceAll(response: HttpResponseBase): Observable<Place[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Place.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Place[]>(<any>null);
    }

    /**
     * READY TO GO? NOT TESTED
     * @param body (optional) 
     * @return Success
     */
    place(body: Place | undefined): Observable<Place> {
        let url_ = this.baseUrl + "/api/place";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.transformResult(url_, response_, (r) => this.processPlace(<any>r));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPlace(<any>r));
                } catch (e) {
                    return <Observable<Place>><any>_observableThrow(e);
                }
            } else
                return <Observable<Place>><any>_observableThrow(response_);
        }));
    }

    protected processPlace(response: HttpResponseBase): Observable<Place> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Place.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Place>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    place2(body: Place | undefined): Observable<Place> {
        let url_ = this.baseUrl + "/api/place";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.transformResult(url_, response_, (r) => this.processPlace2(<any>r));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPlace2(<any>r));
                } catch (e) {
                    return <Observable<Place>><any>_observableThrow(e);
                }
            } else
                return <Observable<Place>><any>_observableThrow(response_);
        }));
    }

    protected processPlace2(response: HttpResponseBase): Observable<Place> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Place.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Place>(<any>null);
    }

    /**
     * NOT IMPLEMENTED
     * @param establishmentId (optional) 
     * @return Success
     */
    place3(establishmentId: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/place?";
        if (establishmentId !== undefined && establishmentId !== null)
            url_ += "establishmentId=" + encodeURIComponent("" + establishmentId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.transformResult(url_, response_, (r) => this.processPlace3(<any>r));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPlace3(<any>r));
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPlace3(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Obtiene los lugares recomendados en funcion de la playlist enviada
     * @param playlistId (optional) 
     * @param lat (optional) 
     * @param lon (optional) 
     * @param distance (optional) 
     * @param spoToken (optional) Token de spotify
     * @param page (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    recommended(playlistId: string | null | undefined, lat: number | undefined, lon: number | undefined, distance: number | undefined, spoToken: string | null | undefined, page: number | undefined, pageSize: number | undefined): Observable<ComparedPlace[]> {
        let url_ = this.baseUrl + "/api/place/recommended?";
        if (playlistId !== undefined && playlistId !== null)
            url_ += "playlistId=" + encodeURIComponent("" + playlistId) + "&";
        if (lat === null)
            throw new Error("The parameter 'lat' cannot be null.");
        else if (lat !== undefined)
            url_ += "lat=" + encodeURIComponent("" + lat) + "&";
        if (lon === null)
            throw new Error("The parameter 'lon' cannot be null.");
        else if (lon !== undefined)
            url_ += "lon=" + encodeURIComponent("" + lon) + "&";
        if (distance === null)
            throw new Error("The parameter 'distance' cannot be null.");
        else if (distance !== undefined)
            url_ += "distance=" + encodeURIComponent("" + distance) + "&";
        if (spoToken !== undefined && spoToken !== null)
            url_ += "spoToken=" + encodeURIComponent("" + spoToken) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.transformResult(url_, response_, (r) => this.processRecommended(<any>r));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processRecommended(<any>r));
                } catch (e) {
                    return <Observable<ComparedPlace[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ComparedPlace[]>><any>_observableThrow(response_);
        }));
    }

    protected processRecommended(response: HttpResponseBase): Observable<ComparedPlace[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ComparedPlace.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ComparedPlace[]>(<any>null);
    }

    /**
     * Obtiene los lugares recomendados en funcion del top50 del usuario
     * @param lat (optional) 
     * @param lon (optional) 
     * @param distance (optional) 
     * @param spoToken (optional) Token de spotify
     * @param page (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    top(lat: number | undefined, lon: number | undefined, distance: number | undefined, spoToken: string | null | undefined, page: number | undefined, pageSize: number | undefined): Observable<ComparedPlace[]> {
        let url_ = this.baseUrl + "/api/place/recommended/top?";
        if (lat === null)
            throw new Error("The parameter 'lat' cannot be null.");
        else if (lat !== undefined)
            url_ += "lat=" + encodeURIComponent("" + lat) + "&";
        if (lon === null)
            throw new Error("The parameter 'lon' cannot be null.");
        else if (lon !== undefined)
            url_ += "lon=" + encodeURIComponent("" + lon) + "&";
        if (distance === null)
            throw new Error("The parameter 'distance' cannot be null.");
        else if (distance !== undefined)
            url_ += "distance=" + encodeURIComponent("" + distance) + "&";
        if (spoToken !== undefined && spoToken !== null)
            url_ += "spoToken=" + encodeURIComponent("" + spoToken) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.transformResult(url_, response_, (r) => this.processTop(<any>r));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTop(<any>r));
                } catch (e) {
                    return <Observable<ComparedPlace[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ComparedPlace[]>><any>_observableThrow(response_);
        }));
    }

    protected processTop(response: HttpResponseBase): Observable<ComparedPlace[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ComparedPlace.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ComparedPlace[]>(<any>null);
    }

    /**
     * We gucci
     * @param body (optional) 
     * @return Success
     */
    song(establishmentId: string | null, body: Song | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/place/{establishmentId}/song";
        if (establishmentId === undefined || establishmentId === null)
            throw new Error("The parameter 'establishmentId' must be defined.");
        url_ = url_.replace("{establishmentId}", encodeURIComponent("" + establishmentId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.transformResult(url_, response_, (r) => this.processSong(<any>r));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processSong(<any>r));
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSong(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * NOT IMPLEMENTED
     * @param value (optional) 
     * @return Success
     */
    rate(placeId: string | null, value: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/place/{placeId}/rate?";
        if (placeId === undefined || placeId === null)
            throw new Error("The parameter 'placeId' must be defined.");
        url_ = url_.replace("{placeId}", encodeURIComponent("" + placeId));
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.transformResult(url_, response_, (r) => this.processRate(<any>r));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processRate(<any>r));
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * IGNORA ESTO
     * @return Success
     */
    weatherforecast(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/weatherforecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.transformResult(url_, response_, (r) => this.processWeatherforecast(<any>r));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processWeatherforecast(<any>r));
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>_observableThrow(response_);
        }));
    }

    protected processWeatherforecast(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeatherForecast[]>(<any>null);
    }
}

export class Geolocation implements IGeolocation {
    latitude?: number;
    longitude?: number;

    constructor(data?: IGeolocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): Geolocation {
        data = typeof data === 'object' ? data : {};
        let result = new Geolocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data; 
    }
}

export interface IGeolocation {
    latitude?: number;
    longitude?: number;
}

export class Artist implements IArtist {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IArtist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Artist {
        data = typeof data === 'object' ? data : {};
        let result = new Artist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IArtist {
    id?: string | undefined;
    name?: string | undefined;
}

export class Song implements ISong {
    id?: string | undefined;
    name?: string | undefined;
    artists?: Artist[] | undefined;

    constructor(data?: ISong) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["artists"])) {
                this.artists = [] as any;
                for (let item of _data["artists"])
                    this.artists!.push(Artist.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Song {
        data = typeof data === 'object' ? data : {};
        let result = new Song();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.artists)) {
            data["artists"] = [];
            for (let item of this.artists)
                data["artists"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISong {
    id?: string | undefined;
    name?: string | undefined;
    artists?: Artist[] | undefined;
}

export class Playlist implements IPlaylist {
    id?: string | undefined;
    imageUrl?: string | undefined;
    name?: string | undefined;
    songs?: Song[] | undefined;
    snapshotVersion?: string | undefined;
    url?: string | undefined;
    readonly changed?: boolean;

    constructor(data?: IPlaylist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.imageUrl = _data["imageUrl"];
            this.name = _data["name"];
            if (Array.isArray(_data["songs"])) {
                this.songs = [] as any;
                for (let item of _data["songs"])
                    this.songs!.push(Song.fromJS(item));
            }
            this.snapshotVersion = _data["snapshotVersion"];
            this.url = _data["url"];
            (<any>this).changed = _data["changed"];
        }
    }

    static fromJS(data: any): Playlist {
        data = typeof data === 'object' ? data : {};
        let result = new Playlist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["imageUrl"] = this.imageUrl;
        data["name"] = this.name;
        if (Array.isArray(this.songs)) {
            data["songs"] = [];
            for (let item of this.songs)
                data["songs"].push(item.toJSON());
        }
        data["snapshotVersion"] = this.snapshotVersion;
        data["url"] = this.url;
        data["changed"] = this.changed;
        return data; 
    }
}

export interface IPlaylist {
    id?: string | undefined;
    imageUrl?: string | undefined;
    name?: string | undefined;
    songs?: Song[] | undefined;
    snapshotVersion?: string | undefined;
    url?: string | undefined;
    changed?: boolean;
}

export class User implements IUser {
    born?: number;
    displayName?: string | undefined;
    id?: string | undefined;
    currentToken?: string | undefined;
    expiresIn?: number;
    tokenEmissionTime?: Date;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.born = _data["born"];
            this.displayName = _data["displayName"];
            this.id = _data["id"];
            this.currentToken = _data["currentToken"];
            this.expiresIn = _data["expiresIn"];
            this.tokenEmissionTime = _data["tokenEmissionTime"] ? new Date(_data["tokenEmissionTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["born"] = this.born;
        data["displayName"] = this.displayName;
        data["id"] = this.id;
        data["currentToken"] = this.currentToken;
        data["expiresIn"] = this.expiresIn;
        data["tokenEmissionTime"] = this.tokenEmissionTime ? this.tokenEmissionTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUser {
    born?: number;
    displayName?: string | undefined;
    id?: string | undefined;
    currentToken?: string | undefined;
    expiresIn?: number;
    tokenEmissionTime?: Date;
}

export class Rating implements IRating {
    id?: string | undefined;
    value?: number;
    user?: User;

    constructor(data?: IRating) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.value = _data["value"];
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Rating {
        data = typeof data === 'object' ? data : {};
        let result = new Rating();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IRating {
    id?: string | undefined;
    value?: number;
    user?: User;
}

export class RecognizedSong implements IRecognizedSong {
    count?: number;
    id?: string | undefined;
    name?: string | undefined;
    artists?: Artist[] | undefined;

    constructor(data?: IRecognizedSong) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["artists"])) {
                this.artists = [] as any;
                for (let item of _data["artists"])
                    this.artists!.push(Artist.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RecognizedSong {
        data = typeof data === 'object' ? data : {};
        let result = new RecognizedSong();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.artists)) {
            data["artists"] = [];
            for (let item of this.artists)
                data["artists"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRecognizedSong {
    count?: number;
    id?: string | undefined;
    name?: string | undefined;
    artists?: Artist[] | undefined;
}

export class Schedule implements ISchedule {
    start?: Date;
    end?: Date;

    constructor(data?: ISchedule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.start = _data["start"] ? new Date(_data["start"].toString()) : <any>undefined;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Schedule {
        data = typeof data === 'object' ? data : {};
        let result = new Schedule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["start"] = this.start ? this.start.toISOString() : <any>undefined;
        data["end"] = this.end ? this.end.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ISchedule {
    start?: Date;
    end?: Date;
}

export enum DayOfWeek {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export class Timetable implements ITimetable {
    id?: string | undefined;
    schedules?: Schedule[] | undefined;
    day?: DayOfWeek;

    constructor(data?: ITimetable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["schedules"])) {
                this.schedules = [] as any;
                for (let item of _data["schedules"])
                    this.schedules!.push(Schedule.fromJS(item));
            }
            this.day = _data["day"];
        }
    }

    static fromJS(data: any): Timetable {
        data = typeof data === 'object' ? data : {};
        let result = new Timetable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.schedules)) {
            data["schedules"] = [];
            for (let item of this.schedules)
                data["schedules"].push(item.toJSON());
        }
        data["day"] = this.day;
        return data; 
    }
}

export interface ITimetable {
    id?: string | undefined;
    schedules?: Schedule[] | undefined;
    day?: DayOfWeek;
}

export class Place implements IPlace {
    id?: string | undefined;
    address?: string | undefined;
    displayName?: string | undefined;
    location?: Geolocation;
    mainPlaylist?: Playlist;
    weeklyPlaylists?: { [key: string]: Playlist; } | undefined;
    ratings?: Rating[] | undefined;
    owners?: User[] | undefined;
    phone?: string | undefined;
    geohash?: string | undefined;
    recognizedMusic?: RecognizedSong[] | undefined;
    timetables?: Timetable[] | undefined;

    constructor(data?: IPlace) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.address = _data["address"];
            this.displayName = _data["displayName"];
            this.location = _data["location"] ? Geolocation.fromJS(_data["location"]) : <any>undefined;
            this.mainPlaylist = _data["mainPlaylist"] ? Playlist.fromJS(_data["mainPlaylist"]) : <any>undefined;
            if (_data["weeklyPlaylists"]) {
                this.weeklyPlaylists = {} as any;
                for (let key in _data["weeklyPlaylists"]) {
                    if (_data["weeklyPlaylists"].hasOwnProperty(key))
                        this.weeklyPlaylists![key] = _data["weeklyPlaylists"][key] ? Playlist.fromJS(_data["weeklyPlaylists"][key]) : new Playlist();
                }
            }
            if (Array.isArray(_data["ratings"])) {
                this.ratings = [] as any;
                for (let item of _data["ratings"])
                    this.ratings!.push(Rating.fromJS(item));
            }
            if (Array.isArray(_data["owners"])) {
                this.owners = [] as any;
                for (let item of _data["owners"])
                    this.owners!.push(User.fromJS(item));
            }
            this.phone = _data["phone"];
            this.geohash = _data["geohash"];
            if (Array.isArray(_data["recognizedMusic"])) {
                this.recognizedMusic = [] as any;
                for (let item of _data["recognizedMusic"])
                    this.recognizedMusic!.push(RecognizedSong.fromJS(item));
            }
            if (Array.isArray(_data["timetables"])) {
                this.timetables = [] as any;
                for (let item of _data["timetables"])
                    this.timetables!.push(Timetable.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Place {
        data = typeof data === 'object' ? data : {};
        let result = new Place();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["displayName"] = this.displayName;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["mainPlaylist"] = this.mainPlaylist ? this.mainPlaylist.toJSON() : <any>undefined;
        if (this.weeklyPlaylists) {
            data["weeklyPlaylists"] = {};
            for (let key in this.weeklyPlaylists) {
                if (this.weeklyPlaylists.hasOwnProperty(key))
                    data["weeklyPlaylists"][key] = this.weeklyPlaylists[key] ? this.weeklyPlaylists[key].toJSON() : <any>undefined;
            }
        }
        if (Array.isArray(this.ratings)) {
            data["ratings"] = [];
            for (let item of this.ratings)
                data["ratings"].push(item.toJSON());
        }
        if (Array.isArray(this.owners)) {
            data["owners"] = [];
            for (let item of this.owners)
                data["owners"].push(item.toJSON());
        }
        data["phone"] = this.phone;
        data["geohash"] = this.geohash;
        if (Array.isArray(this.recognizedMusic)) {
            data["recognizedMusic"] = [];
            for (let item of this.recognizedMusic)
                data["recognizedMusic"].push(item.toJSON());
        }
        if (Array.isArray(this.timetables)) {
            data["timetables"] = [];
            for (let item of this.timetables)
                data["timetables"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPlace {
    id?: string | undefined;
    address?: string | undefined;
    displayName?: string | undefined;
    location?: Geolocation;
    mainPlaylist?: Playlist;
    weeklyPlaylists?: { [key: string]: Playlist; } | undefined;
    ratings?: Rating[] | undefined;
    owners?: User[] | undefined;
    phone?: string | undefined;
    geohash?: string | undefined;
    recognizedMusic?: RecognizedSong[] | undefined;
    timetables?: Timetable[] | undefined;
}

export class ComparedPlace implements IComparedPlace {
    similitude?: number;
    id?: string | undefined;
    address?: string | undefined;
    displayName?: string | undefined;
    location?: Geolocation;
    mainPlaylist?: Playlist;
    weeklyPlaylists?: { [key: string]: Playlist; } | undefined;
    ratings?: Rating[] | undefined;
    owners?: User[] | undefined;
    phone?: string | undefined;
    geohash?: string | undefined;
    recognizedMusic?: RecognizedSong[] | undefined;
    timetables?: Timetable[] | undefined;

    constructor(data?: IComparedPlace) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.similitude = _data["similitude"];
            this.id = _data["id"];
            this.address = _data["address"];
            this.displayName = _data["displayName"];
            this.location = _data["location"] ? Geolocation.fromJS(_data["location"]) : <any>undefined;
            this.mainPlaylist = _data["mainPlaylist"] ? Playlist.fromJS(_data["mainPlaylist"]) : <any>undefined;
            if (_data["weeklyPlaylists"]) {
                this.weeklyPlaylists = {} as any;
                for (let key in _data["weeklyPlaylists"]) {
                    if (_data["weeklyPlaylists"].hasOwnProperty(key))
                        this.weeklyPlaylists![key] = _data["weeklyPlaylists"][key] ? Playlist.fromJS(_data["weeklyPlaylists"][key]) : new Playlist();
                }
            }
            if (Array.isArray(_data["ratings"])) {
                this.ratings = [] as any;
                for (let item of _data["ratings"])
                    this.ratings!.push(Rating.fromJS(item));
            }
            if (Array.isArray(_data["owners"])) {
                this.owners = [] as any;
                for (let item of _data["owners"])
                    this.owners!.push(User.fromJS(item));
            }
            this.phone = _data["phone"];
            this.geohash = _data["geohash"];
            if (Array.isArray(_data["recognizedMusic"])) {
                this.recognizedMusic = [] as any;
                for (let item of _data["recognizedMusic"])
                    this.recognizedMusic!.push(RecognizedSong.fromJS(item));
            }
            if (Array.isArray(_data["timetables"])) {
                this.timetables = [] as any;
                for (let item of _data["timetables"])
                    this.timetables!.push(Timetable.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ComparedPlace {
        data = typeof data === 'object' ? data : {};
        let result = new ComparedPlace();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["similitude"] = this.similitude;
        data["id"] = this.id;
        data["address"] = this.address;
        data["displayName"] = this.displayName;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["mainPlaylist"] = this.mainPlaylist ? this.mainPlaylist.toJSON() : <any>undefined;
        if (this.weeklyPlaylists) {
            data["weeklyPlaylists"] = {};
            for (let key in this.weeklyPlaylists) {
                if (this.weeklyPlaylists.hasOwnProperty(key))
                    data["weeklyPlaylists"][key] = this.weeklyPlaylists[key] ? this.weeklyPlaylists[key].toJSON() : <any>undefined;
            }
        }
        if (Array.isArray(this.ratings)) {
            data["ratings"] = [];
            for (let item of this.ratings)
                data["ratings"].push(item.toJSON());
        }
        if (Array.isArray(this.owners)) {
            data["owners"] = [];
            for (let item of this.owners)
                data["owners"].push(item.toJSON());
        }
        data["phone"] = this.phone;
        data["geohash"] = this.geohash;
        if (Array.isArray(this.recognizedMusic)) {
            data["recognizedMusic"] = [];
            for (let item of this.recognizedMusic)
                data["recognizedMusic"].push(item.toJSON());
        }
        if (Array.isArray(this.timetables)) {
            data["timetables"] = [];
            for (let item of this.timetables)
                data["timetables"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IComparedPlace {
    similitude?: number;
    id?: string | undefined;
    address?: string | undefined;
    displayName?: string | undefined;
    location?: Geolocation;
    mainPlaylist?: Playlist;
    weeklyPlaylists?: { [key: string]: Playlist; } | undefined;
    ratings?: Rating[] | undefined;
    owners?: User[] | undefined;
    phone?: string | undefined;
    geohash?: string | undefined;
    recognizedMusic?: RecognizedSong[] | undefined;
    timetables?: Timetable[] | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data; 
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new ApiException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}

src/app/services/baseService.ts