/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const BASE_URL = new InjectionToken<string>('BASE_URL');

@Injectable()
export class HomeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://tfggroover.azurewebsites.net";
    }

    auth(refresh_token: string | null | undefined): Observable<AuthenticationResponse> {
        let url_ = this.baseUrl + "/home/auth?";
        if (refresh_token !== undefined && refresh_token !== null)
            url_ += "refresh_token=" + encodeURIComponent("" + refresh_token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuth(<any>response_);
                } catch (e) {
                    return <Observable<AuthenticationResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthenticationResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAuth(response: HttpResponseBase): Observable<AuthenticationResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticationResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticationResponse>(<any>null);
    }

    authCallback(code: string | null | undefined, state: string | null | undefined): Observable<AuthenticationResponse> {
        let url_ = this.baseUrl + "/home/callback?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (state !== undefined && state !== null)
            url_ += "State=" + encodeURIComponent("" + state) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthCallback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthCallback(<any>response_);
                } catch (e) {
                    return <Observable<AuthenticationResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthenticationResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAuthCallback(response: HttpResponseBase): Observable<AuthenticationResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticationResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticationResponse>(<any>null);
    }

    authWebCallback(code: string | null | undefined, state: string | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/home/web-callback?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (state !== undefined && state !== null)
            url_ += "State=" + encodeURIComponent("" + state) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthWebCallback(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthWebCallback(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAuthWebCallback(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

@Injectable()
export class PlaceClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://tfggroover.azurewebsites.net/";
    }

    getEstablishmentsAll(page: number | undefined, pageSize: number | undefined, mine: boolean | undefined, pendingReview: boolean | undefined): Observable<Place[]> {
        let url_ = this.baseUrl + "/api/place/list?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (mine === null)
            throw new Error("The parameter 'mine' cannot be null.");
        else if (mine !== undefined)
            url_ += "mine=" + encodeURIComponent("" + mine) + "&";
        if (pendingReview === null)
            throw new Error("The parameter 'pendingReview' cannot be null.");
        else if (pendingReview !== undefined)
            url_ += "pendingReview=" + encodeURIComponent("" + pendingReview) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEstablishmentsAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEstablishmentsAll(<any>response_);
                } catch (e) {
                    return <Observable<Place[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Place[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetEstablishmentsAll(response: HttpResponseBase): Observable<Place[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Place.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Place[]>(<any>null);
    }

    getEstablishments(lat: number | undefined, lon: number | undefined, distance: number | undefined, page: number | undefined, pageSize: number | undefined): Observable<Place[]> {
        let url_ = this.baseUrl + "/api/place?";
        if (lat === null)
            throw new Error("The parameter 'lat' cannot be null.");
        else if (lat !== undefined)
            url_ += "lat=" + encodeURIComponent("" + lat) + "&";
        if (lon === null)
            throw new Error("The parameter 'lon' cannot be null.");
        else if (lon !== undefined)
            url_ += "lon=" + encodeURIComponent("" + lon) + "&";
        if (distance === null)
            throw new Error("The parameter 'distance' cannot be null.");
        else if (distance !== undefined)
            url_ += "distance=" + encodeURIComponent("" + distance) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEstablishments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEstablishments(<any>response_);
                } catch (e) {
                    return <Observable<Place[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Place[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetEstablishments(response: HttpResponseBase): Observable<Place[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Place.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Place[]>(<any>null);
    }

    createEstablishment(establishment: Place): Observable<Place> {
        let url_ = this.baseUrl + "/api/place";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(establishment);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateEstablishment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateEstablishment(<any>response_);
                } catch (e) {
                    return <Observable<Place>><any>_observableThrow(e);
                }
            } else
                return <Observable<Place>><any>_observableThrow(response_);
        }));
    }

    protected processCreateEstablishment(response: HttpResponseBase): Observable<Place> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Place.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Place>(<any>null);
    }

    updateEstablishment(establishment: Place): Observable<Place> {
        let url_ = this.baseUrl + "/api/place";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(establishment);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateEstablishment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateEstablishment(<any>response_);
                } catch (e) {
                    return <Observable<Place>><any>_observableThrow(e);
                }
            } else
                return <Observable<Place>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateEstablishment(response: HttpResponseBase): Observable<Place> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Place.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Place>(<any>null);
    }

    deleteEstablishment(establishmentId: string | null | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/place?";
        if (establishmentId !== undefined && establishmentId !== null)
            url_ += "establishmentId=" + encodeURIComponent("" + establishmentId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEstablishment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEstablishment(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteEstablishment(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getRecommendedEstablishmentsForPlaylist(playlistId: string | null | undefined, lat: number | undefined, lon: number | undefined, distance: number | undefined, page: number | undefined, pageSize: number | undefined): Observable<ComparedPlace[]> {
        let url_ = this.baseUrl + "/api/place/recommended?";
        if (playlistId !== undefined && playlistId !== null)
            url_ += "playlistId=" + encodeURIComponent("" + playlistId) + "&";
        if (lat === null)
            throw new Error("The parameter 'lat' cannot be null.");
        else if (lat !== undefined)
            url_ += "lat=" + encodeURIComponent("" + lat) + "&";
        if (lon === null)
            throw new Error("The parameter 'lon' cannot be null.");
        else if (lon !== undefined)
            url_ += "lon=" + encodeURIComponent("" + lon) + "&";
        if (distance === null)
            throw new Error("The parameter 'distance' cannot be null.");
        else if (distance !== undefined)
            url_ += "distance=" + encodeURIComponent("" + distance) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecommendedEstablishmentsForPlaylist(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecommendedEstablishmentsForPlaylist(<any>response_);
                } catch (e) {
                    return <Observable<ComparedPlace[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ComparedPlace[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRecommendedEstablishmentsForPlaylist(response: HttpResponseBase): Observable<ComparedPlace[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ComparedPlace.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ComparedPlace[]>(<any>null);
    }

    getRecommendedEstablishmentsForTop(lat: number | undefined, lon: number | undefined, distance: number | undefined, page: number | undefined, pageSize: number | undefined): Observable<ComparedPlace[]> {
        let url_ = this.baseUrl + "/api/place/recommended/top?";
        if (lat === null)
            throw new Error("The parameter 'lat' cannot be null.");
        else if (lat !== undefined)
            url_ += "lat=" + encodeURIComponent("" + lat) + "&";
        if (lon === null)
            throw new Error("The parameter 'lon' cannot be null.");
        else if (lon !== undefined)
            url_ += "lon=" + encodeURIComponent("" + lon) + "&";
        if (distance === null)
            throw new Error("The parameter 'distance' cannot be null.");
        else if (distance !== undefined)
            url_ += "distance=" + encodeURIComponent("" + distance) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecommendedEstablishmentsForTop(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecommendedEstablishmentsForTop(<any>response_);
                } catch (e) {
                    return <Observable<ComparedPlace[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ComparedPlace[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRecommendedEstablishmentsForTop(response: HttpResponseBase): Observable<ComparedPlace[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ComparedPlace.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ComparedPlace[]>(<any>null);
    }

    getPlace(id: string | null): Observable<Place> {
        let url_ = this.baseUrl + "/api/place/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPlace(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPlace(<any>response_);
                } catch (e) {
                    return <Observable<Place>><any>_observableThrow(e);
                }
            } else
                return <Observable<Place>><any>_observableThrow(response_);
        }));
    }

    protected processGetPlace(response: HttpResponseBase): Observable<Place> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Place.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Place>(<any>null);
    }

    recognizeSong(establishmentId: string | null, song: Song): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/place/{establishmentId}/song";
        if (establishmentId === undefined || establishmentId === null)
            throw new Error("The parameter 'establishmentId' must be defined.");
        url_ = url_.replace("{establishmentId}", encodeURIComponent("" + establishmentId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(song);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRecognizeSong(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRecognizeSong(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processRecognizeSong(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    ratePlace(placeId: string | null, value: number | undefined): Observable<Place> {
        let url_ = this.baseUrl + "/api/place/{placeId}/rate?";
        if (placeId === undefined || placeId === null)
            throw new Error("The parameter 'placeId' must be defined.");
        url_ = url_.replace("{placeId}", encodeURIComponent("" + placeId));
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRatePlace(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRatePlace(<any>response_);
                } catch (e) {
                    return <Observable<Place>><any>_observableThrow(e);
                }
            } else
                return <Observable<Place>><any>_observableThrow(response_);
        }));
    }

    protected processRatePlace(response: HttpResponseBase): Observable<Place> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Place.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Place>(<any>null);
    }

    reviewPlace(placeId: string | null, review: PlaceReview): Observable<Place> {
        let url_ = this.baseUrl + "/api/place/{placeId}/review";
        if (placeId === undefined || placeId === null)
            throw new Error("The parameter 'placeId' must be defined.");
        url_ = url_.replace("{placeId}", encodeURIComponent("" + placeId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(review);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processReviewPlace(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReviewPlace(<any>response_);
                } catch (e) {
                    return <Observable<Place>><any>_observableThrow(e);
                }
            } else
                return <Observable<Place>><any>_observableThrow(response_);
        }));
    }

    protected processReviewPlace(response: HttpResponseBase): Observable<Place> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Place.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Place>(<any>null);
    }
}

@Injectable()
export class UserClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://tfggroover.azurewebsites.net/";
    }

    getCurrentUser(): Observable<User> {
        let url_ = this.baseUrl + "/api/user/currentuser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentUser(<any>response_);
                } catch (e) {
                    return <Observable<User>><any>_observableThrow(e);
                }
            } else
                return <Observable<User>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentUser(response: HttpResponseBase): Observable<User> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<User>(<any>null);
    }

    setAdmin(userId: string | null): Observable<ListableUser> {
        let url_ = this.baseUrl + "/api/user/{userId}/admin";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetAdmin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetAdmin(<any>response_);
                } catch (e) {
                    return <Observable<ListableUser>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListableUser>><any>_observableThrow(response_);
        }));
    }

    protected processSetAdmin(response: HttpResponseBase): Observable<ListableUser> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ListableUser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListableUser>(<any>null);
    }

    getUsers(page: number | undefined, pageSize: number | undefined, name: string | null | undefined, admin: boolean | undefined): Observable<ListableUser[]> {
        let url_ = this.baseUrl + "/api/user?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (admin === null)
            throw new Error("The parameter 'admin' cannot be null.");
        else if (admin !== undefined)
            url_ += "admin=" + encodeURIComponent("" + admin) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsers(<any>response_);
                } catch (e) {
                    return <Observable<ListableUser[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListableUser[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetUsers(response: HttpResponseBase): Observable<ListableUser[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ListableUser.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListableUser[]>(<any>null);
    }

    deleteAccount(): Observable<boolean> {
        let url_ = this.baseUrl + "/api/user";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAccount(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteAccount(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }
}

export class AuthenticationResponse implements IAuthenticationResponse {
    spotify?: IAuthResponse | undefined;
    spotifyUserData?: UserInfo | undefined;
    firebase?: string | undefined;

    constructor(data?: IAuthenticationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.spotify = _data["spotify"] ? IAuthResponse.fromJS(_data["spotify"]) : <any>undefined;
            this.spotifyUserData = _data["spotifyUserData"] ? UserInfo.fromJS(_data["spotifyUserData"]) : <any>undefined;
            this.firebase = _data["firebase"];
        }
    }

    static fromJS(data: any): AuthenticationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["spotify"] = this.spotify ? this.spotify.toJSON() : <any>undefined;
        data["spotifyUserData"] = this.spotifyUserData ? this.spotifyUserData.toJSON() : <any>undefined;
        data["firebase"] = this.firebase;
        return data;
    }
}

export interface IAuthenticationResponse {
    spotify?: IAuthResponse | undefined;
    spotifyUserData?: UserInfo | undefined;
    firebase?: string | undefined;
}

export abstract class IAuthResponse implements IIAuthResponse {
    access_token?: string | undefined;
    token_type?: string | undefined;
    expires_in?: number;
    scope?: string | undefined;
    refresh_Token?: string | undefined;

    constructor(data?: IIAuthResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.access_token = _data["access_token"];
            this.token_type = _data["token_type"];
            this.expires_in = _data["expires_in"];
            this.scope = _data["scope"];
            this.refresh_Token = _data["refresh_Token"];
        }
    }

    static fromJS(data: any): IAuthResponse {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IAuthResponse' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["access_token"] = this.access_token;
        data["token_type"] = this.token_type;
        data["expires_in"] = this.expires_in;
        data["scope"] = this.scope;
        data["refresh_Token"] = this.refresh_Token;
        return data;
    }
}

export interface IIAuthResponse {
    access_token?: string | undefined;
    token_type?: string | undefined;
    expires_in?: number;
    scope?: string | undefined;
    refresh_Token?: string | undefined;
}

export class UserInfo implements IUserInfo {
    country?: string | undefined;
    display_name?: string | undefined;
    email?: string | undefined;
    explicit_content?: ExplicitContentFilters | undefined;
    external_urls?: { [key: string]: string; } | undefined;
    href?: string | undefined;
    id?: string | undefined;
    images?: Image[] | undefined;
    product?: string | undefined;
    type?: string | undefined;
    uri?: string | undefined;

    constructor(data?: IUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.country = _data["country"];
            this.display_name = _data["display_name"];
            this.email = _data["email"];
            this.explicit_content = _data["explicit_content"] ? ExplicitContentFilters.fromJS(_data["explicit_content"]) : <any>undefined;
            if (_data["external_urls"]) {
                this.external_urls = {} as any;
                for (let key in _data["external_urls"]) {
                    if (_data["external_urls"].hasOwnProperty(key))
                        this.external_urls![key] = _data["external_urls"][key];
                }
            }
            this.href = _data["href"];
            this.id = _data["id"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(Image.fromJS(item));
            }
            this.product = _data["product"];
            this.type = _data["type"];
            this.uri = _data["uri"];
        }
    }

    static fromJS(data: any): UserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["country"] = this.country;
        data["display_name"] = this.display_name;
        data["email"] = this.email;
        data["explicit_content"] = this.explicit_content ? this.explicit_content.toJSON() : <any>undefined;
        if (this.external_urls) {
            data["external_urls"] = {};
            for (let key in this.external_urls) {
                if (this.external_urls.hasOwnProperty(key))
                    data["external_urls"][key] = this.external_urls[key];
            }
        }
        data["href"] = this.href;
        data["id"] = this.id;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        data["product"] = this.product;
        data["type"] = this.type;
        data["uri"] = this.uri;
        return data;
    }
}

export interface IUserInfo {
    country?: string | undefined;
    display_name?: string | undefined;
    email?: string | undefined;
    explicit_content?: ExplicitContentFilters | undefined;
    external_urls?: { [key: string]: string; } | undefined;
    href?: string | undefined;
    id?: string | undefined;
    images?: Image[] | undefined;
    product?: string | undefined;
    type?: string | undefined;
    uri?: string | undefined;
}

export class ExplicitContentFilters implements IExplicitContentFilters {
    filter_enabled?: boolean;
    filter_locked?: boolean;

    constructor(data?: IExplicitContentFilters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.filter_enabled = _data["filter_enabled"];
            this.filter_locked = _data["filter_locked"];
        }
    }

    static fromJS(data: any): ExplicitContentFilters {
        data = typeof data === 'object' ? data : {};
        let result = new ExplicitContentFilters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filter_enabled"] = this.filter_enabled;
        data["filter_locked"] = this.filter_locked;
        return data;
    }
}

export interface IExplicitContentFilters {
    filter_enabled?: boolean;
    filter_locked?: boolean;
}

export class Image implements IImage {
    height?: number | undefined;
    width?: number | undefined;
    url?: string | undefined;

    constructor(data?: IImage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.height = _data["height"];
            this.width = _data["width"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Image {
        data = typeof data === 'object' ? data : {};
        let result = new Image();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["height"] = this.height;
        data["width"] = this.width;
        data["url"] = this.url;
        return data;
    }
}

export interface IImage {
    height?: number | undefined;
    width?: number | undefined;
    url?: string | undefined;
}

export class Place implements IPlace {
    id?: string | undefined;
    address?: string | undefined;
    displayName?: string | undefined;
    location?: Geolocation | undefined;
    mainPlaylist?: Playlist | undefined;
    weeklyPlaylists?: { [key: string]: Playlist; } | undefined;
    ratings?: number;
    ratingCount?: number;
    owners?: ListableUser[] | undefined;
    phone?: string | undefined;
    geohash?: string | undefined;
    recognizedMusic?: RecognizedSong[] | undefined;
    timetables?: Timetable[] | undefined;
    approved?: boolean;
    pendingReview?: boolean;
    reviewComment?: string | undefined;

    constructor(data?: IPlace) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.address = _data["address"];
            this.displayName = _data["displayName"];
            this.location = _data["location"] ? Geolocation.fromJS(_data["location"]) : <any>undefined;
            this.mainPlaylist = _data["mainPlaylist"] ? Playlist.fromJS(_data["mainPlaylist"]) : <any>undefined;
            if (_data["weeklyPlaylists"]) {
                this.weeklyPlaylists = {} as any;
                for (let key in _data["weeklyPlaylists"]) {
                    if (_data["weeklyPlaylists"].hasOwnProperty(key))
                        this.weeklyPlaylists![key] = _data["weeklyPlaylists"][key] ? Playlist.fromJS(_data["weeklyPlaylists"][key]) : new Playlist();
                }
            }
            this.ratings = _data["ratings"];
            this.ratingCount = _data["ratingCount"];
            if (Array.isArray(_data["owners"])) {
                this.owners = [] as any;
                for (let item of _data["owners"])
                    this.owners!.push(ListableUser.fromJS(item));
            }
            this.phone = _data["phone"];
            this.geohash = _data["geohash"];
            if (Array.isArray(_data["recognizedMusic"])) {
                this.recognizedMusic = [] as any;
                for (let item of _data["recognizedMusic"])
                    this.recognizedMusic!.push(RecognizedSong.fromJS(item));
            }
            if (Array.isArray(_data["timetables"])) {
                this.timetables = [] as any;
                for (let item of _data["timetables"])
                    this.timetables!.push(Timetable.fromJS(item));
            }
            this.approved = _data["approved"];
            this.pendingReview = _data["pendingReview"];
            this.reviewComment = _data["reviewComment"];
        }
    }

    static fromJS(data: any): Place {
        data = typeof data === 'object' ? data : {};
        let result = new Place();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address;
        data["displayName"] = this.displayName;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["mainPlaylist"] = this.mainPlaylist ? this.mainPlaylist.toJSON() : <any>undefined;
        if (this.weeklyPlaylists) {
            data["weeklyPlaylists"] = {};
            for (let key in this.weeklyPlaylists) {
                if (this.weeklyPlaylists.hasOwnProperty(key))
                    data["weeklyPlaylists"][key] = this.weeklyPlaylists[key] ? this.weeklyPlaylists[key].toJSON() : <any>undefined;
            }
        }
        data["ratings"] = this.ratings;
        data["ratingCount"] = this.ratingCount;
        if (Array.isArray(this.owners)) {
            data["owners"] = [];
            for (let item of this.owners)
                data["owners"].push(item.toJSON());
        }
        data["phone"] = this.phone;
        data["geohash"] = this.geohash;
        if (Array.isArray(this.recognizedMusic)) {
            data["recognizedMusic"] = [];
            for (let item of this.recognizedMusic)
                data["recognizedMusic"].push(item.toJSON());
        }
        if (Array.isArray(this.timetables)) {
            data["timetables"] = [];
            for (let item of this.timetables)
                data["timetables"].push(item.toJSON());
        }
        data["approved"] = this.approved;
        data["pendingReview"] = this.pendingReview;
        data["reviewComment"] = this.reviewComment;
        return data;
    }
}

export interface IPlace {
    id?: string | undefined;
    address?: string | undefined;
    displayName?: string | undefined;
    location?: Geolocation | undefined;
    mainPlaylist?: Playlist | undefined;
    weeklyPlaylists?: { [key: string]: Playlist; } | undefined;
    ratings?: number;
    ratingCount?: number;
    owners?: ListableUser[] | undefined;
    phone?: string | undefined;
    geohash?: string | undefined;
    recognizedMusic?: RecognizedSong[] | undefined;
    timetables?: Timetable[] | undefined;
    approved?: boolean;
    pendingReview?: boolean;
    reviewComment?: string | undefined;
}

export class Geolocation implements IGeolocation {
    latitude?: number;
    longitude?: number;

    constructor(data?: IGeolocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): Geolocation {
        data = typeof data === 'object' ? data : {};
        let result = new Geolocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data;
    }
}

export interface IGeolocation {
    latitude?: number;
    longitude?: number;
}

export class Playlist implements IPlaylist {
    id?: string | undefined;
    imageUrl?: string | undefined;
    name?: string | undefined;
    songs?: Song[] | undefined;
    snapshotVersion?: string | undefined;
    url?: string | undefined;
    changed?: boolean;

    constructor(data?: IPlaylist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.imageUrl = _data["imageUrl"];
            this.name = _data["name"];
            if (Array.isArray(_data["songs"])) {
                this.songs = [] as any;
                for (let item of _data["songs"])
                    this.songs!.push(Song.fromJS(item));
            }
            this.snapshotVersion = _data["snapshotVersion"];
            this.url = _data["url"];
            this.changed = _data["changed"];
        }
    }

    static fromJS(data: any): Playlist {
        data = typeof data === 'object' ? data : {};
        let result = new Playlist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["imageUrl"] = this.imageUrl;
        data["name"] = this.name;
        if (Array.isArray(this.songs)) {
            data["songs"] = [];
            for (let item of this.songs)
                data["songs"].push(item.toJSON());
        }
        data["snapshotVersion"] = this.snapshotVersion;
        data["url"] = this.url;
        data["changed"] = this.changed;
        return data;
    }
}

export interface IPlaylist {
    id?: string | undefined;
    imageUrl?: string | undefined;
    name?: string | undefined;
    songs?: Song[] | undefined;
    snapshotVersion?: string | undefined;
    url?: string | undefined;
    changed?: boolean;
}

export class Song implements ISong {
    id?: string | undefined;
    name?: string | undefined;
    artists?: Artist[] | undefined;

    constructor(data?: ISong) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["artists"])) {
                this.artists = [] as any;
                for (let item of _data["artists"])
                    this.artists!.push(Artist.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Song {
        data = typeof data === 'object' ? data : {};
        let result = new Song();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.artists)) {
            data["artists"] = [];
            for (let item of this.artists)
                data["artists"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISong {
    id?: string | undefined;
    name?: string | undefined;
    artists?: Artist[] | undefined;
}

export class Artist implements IArtist {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IArtist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Artist {
        data = typeof data === 'object' ? data : {};
        let result = new Artist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IArtist {
    id?: string | undefined;
    name?: string | undefined;
}

export class ListableUser implements IListableUser {
    born?: number;
    displayName?: string | undefined;
    id?: string | undefined;
    email?: string | undefined;
    admin?: boolean;

    constructor(data?: IListableUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.born = _data["born"];
            this.displayName = _data["displayName"];
            this.id = _data["id"];
            this.email = _data["email"];
            this.admin = _data["admin"];
        }
    }

    static fromJS(data: any): ListableUser {
        data = typeof data === 'object' ? data : {};
        let result = new ListableUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["born"] = this.born;
        data["displayName"] = this.displayName;
        data["id"] = this.id;
        data["email"] = this.email;
        data["admin"] = this.admin;
        return data;
    }
}

export interface IListableUser {
    born?: number;
    displayName?: string | undefined;
    id?: string | undefined;
    email?: string | undefined;
    admin?: boolean;
}

export class RecognizedSong extends Song implements IRecognizedSong {
    count?: number;

    constructor(data?: IRecognizedSong) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): RecognizedSong {
        data = typeof data === 'object' ? data : {};
        let result = new RecognizedSong();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        super.toJSON(data);
        return data;
    }
}

export interface IRecognizedSong extends ISong {
    count?: number;
}

export class Timetable implements ITimetable {
    schedules?: Schedule[] | undefined;
    day?: DayOfWeek;

    constructor(data?: ITimetable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["schedules"])) {
                this.schedules = [] as any;
                for (let item of _data["schedules"])
                    this.schedules!.push(Schedule.fromJS(item));
            }
            this.day = _data["day"];
        }
    }

    static fromJS(data: any): Timetable {
        data = typeof data === 'object' ? data : {};
        let result = new Timetable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.schedules)) {
            data["schedules"] = [];
            for (let item of this.schedules)
                data["schedules"].push(item.toJSON());
        }
        data["day"] = this.day;
        return data;
    }
}

export interface ITimetable {
    schedules?: Schedule[] | undefined;
    day?: DayOfWeek;
}

export class Schedule implements ISchedule {
    start?: Date;
    end?: Date;

    constructor(data?: ISchedule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.start = _data["start"] ? new Date(_data["start"].toString()) : <any>undefined;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Schedule {
        data = typeof data === 'object' ? data : {};
        let result = new Schedule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["start"] = this.start ? this.start.toISOString() : <any>undefined;
        data["end"] = this.end ? this.end.toISOString() : <any>undefined;
        return data;
    }
}

export interface ISchedule {
    start?: Date;
    end?: Date;
}

export enum DayOfWeek {
    Sunday = 0,
    Monday = 1,
    Tuesday = 2,
    Wednesday = 3,
    Thursday = 4,
    Friday = 5,
    Saturday = 6,
}

export class ComparedPlace extends Place implements IComparedPlace {
    similitude?: number;

    constructor(data?: IComparedPlace) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.similitude = _data["similitude"];
        }
    }

    static fromJS(data: any): ComparedPlace {
        data = typeof data === 'object' ? data : {};
        let result = new ComparedPlace();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["similitude"] = this.similitude;
        super.toJSON(data);
        return data;
    }
}

export interface IComparedPlace extends IPlace {
    similitude?: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["extensions"]) {
                this.extensions = {} as any;
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        this.extensions![key] = _data["extensions"][key];
                }
            }
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key];
            }
        }
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;
}

export class PlaceReview implements IPlaceReview {
    approved?: boolean;
    reviewComment?: string | undefined;

    constructor(data?: IPlaceReview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.approved = _data["approved"];
            this.reviewComment = _data["reviewComment"];
        }
    }

    static fromJS(data: any): PlaceReview {
        data = typeof data === 'object' ? data : {};
        let result = new PlaceReview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["approved"] = this.approved;
        data["reviewComment"] = this.reviewComment;
        return data;
    }
}

export interface IPlaceReview {
    approved?: boolean;
    reviewComment?: string | undefined;
}

export class User implements IUser {
    born?: number;
    displayName?: string | undefined;
    id?: string | undefined;
    email?: string | undefined;
    admin?: boolean;
    currentToken?: string | undefined;
    refreshToken?: string | undefined;
    expiresIn?: number;
    tokenEmissionTime?: Date;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.born = _data["born"];
            this.displayName = _data["displayName"];
            this.id = _data["id"];
            this.email = _data["email"];
            this.admin = _data["admin"];
            this.currentToken = _data["currentToken"];
            this.refreshToken = _data["refreshToken"];
            this.expiresIn = _data["expiresIn"];
            this.tokenEmissionTime = _data["tokenEmissionTime"] ? new Date(_data["tokenEmissionTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["born"] = this.born;
        data["displayName"] = this.displayName;
        data["id"] = this.id;
        data["email"] = this.email;
        data["admin"] = this.admin;
        data["currentToken"] = this.currentToken;
        data["refreshToken"] = this.refreshToken;
        data["expiresIn"] = this.expiresIn;
        data["tokenEmissionTime"] = this.tokenEmissionTime ? this.tokenEmissionTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUser {
    born?: number;
    displayName?: string | undefined;
    id?: string | undefined;
    email?: string | undefined;
    admin?: boolean;
    currentToken?: string | undefined;
    refreshToken?: string | undefined;
    expiresIn?: number;
    tokenEmissionTime?: Date;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new ApiException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
